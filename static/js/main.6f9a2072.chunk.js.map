{"version":3,"sources":["components/Search/Search.jsx","components/Image/Image.jsx","components/ShowTheWeather.jsx","components/Errora.jsx","Service/index.js","App.js","serviceWorker.js","index.js"],"names":["Search","getWeather","loading","disabled","useState","city","setCity","className","type","name","placeholder","onChange","e","target","value","required","aria-label","aria-describedby","onClick","role","Image","main","src","ShowTheWeather","props","deactive","isActive","theWeather","country","sys","weather","temp","feels_like","humidity","speed","wind","Modal","isOpen","ModalHeader","toggle","ModalBody","ModalFooter","Button","color","size","Error","getData","a","axios","get","data","App","setIsActive","error","setError","setWeather","setLoading","setDisabled","getServerData","response","prevState","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6f9a2072.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Button, Input, Container} from 'reactstrap';\r\nimport './style.css'\r\n\r\nconst Search = ({ getWeather, loading, disabled }) => {\r\n\r\n    const [city, setCity] = useState('');\r\n\r\n    const getCity = () => {\r\n        getWeather(city);\r\n        setCity('');\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='search'>\r\n            <input type=\"text\" name=\"city\" placeholder=\"Enter your city...\" onChange={e => setCity(e.target.value)}\r\n                   value={city} required className=\"form-control\" aria-label=\"Small\"\r\n                   aria-describedby=\"inputGroup-sizing-sm\"/>\r\n            <div className='load'>\r\n                <button disabled={disabled} onClick={ getCity } className=' btn btn-success btn-lg'>Search</button>\r\n                {\r\n                    loading && <div className=\"load spinner-border text-primary\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Search;\r\n","import React from 'react';\r\nimport './image.css';\r\n\r\nconst Image = ({ main }) => {\r\n\r\n    if (main === \"Clouds\") {\r\n        return (<div>\r\n            <img src=\"https://w0.pngwave.com/png/72/265/cloud-icon-sun-clouds-weather-icon-png-clip-art.png\"/>\r\n        </div>)\r\n    } else if (main === \"Clear\") {\r\n        return (<div>\r\n            <img src=\"https://icon-library.com/images/sunny-weather-icon/sunny-weather-icon-14.jpg\"/>\r\n        </div>)\r\n    } else if (main === \"Rain\") {\r\n        return (<div><img\r\n            src=\"https://www.netclipart.com/pp/m/12-120684_showers-weather-clipart-astonishing-showers-weather-rainy-clipart.png\"/>\r\n        </div>)\r\n    } else if (main === \"Snow\") {\r\n        return (<div><img\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Weather-snow.svg/1024px-Weather-snow.svg.png\"/>\r\n        </div>)\r\n    } else if (main === \"Mist\") {\r\n        return (<div><img src=\"https://www.iconfinder.com/data/icons/weather-350/64/fog-weather-mist-512.png\"/>\r\n        </div>)\r\n    } else if (main === \"Thunderstorm\") {\r\n        return (<div><img\r\n            src=\"https://www.clipartkey.com/mpngs/m/9-92258_clip-art-lightning-storm-clipart-thunderstorm-clipart.png\"/>\r\n        </div>)\r\n    }else{\r\n        return (<div><img\r\n            src=\"https://d279m997dpfwgl.cloudfront.net/wp/2017/12/weather_album-art-1000x1000.jpg\"/>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Image;\r\n","import React from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from \"reactstrap\";\r\nimport Image from './Image/Image';\r\n\r\n\r\nconst ShowTheWeather = (props) => {\r\n    const { deactive, isActive } = props;\r\n\r\n    const { name,sys:{country},weather, main:{temp,feels_like,humidity}, wind:{speed} } = props?.theWeather;\r\n\r\n\r\n    return (\r\n        <Modal isOpen={isActive}>\r\n            <ModalHeader toggle={ deactive }>Погода у місті {name}</ModalHeader>\r\n            <ModalBody>\r\n                <p>Місто: {name} {country}</p>\r\n                <p>Погода : <Image main={weather[0].main}/>{weather[0].main}</p>\r\n                <p>Температура: {temp}°C</p>\r\n                <p>Відчуваєтся як : {feels_like} °C</p>\r\n                <p>Вологість : {humidity} %</p>\r\n                <p>Швидкість вітру : {speed} m/c</p>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"success\" size=\"sm\" onClick={deactive}>OK </Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}\r\nexport default ShowTheWeather;\r\n","import React from 'react';\r\n\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n            <strong>False request :( </strong> Try again!\r\n        </div>\r\n    )\r\n}\r\nexport default Error;\r\n","import axios from 'axios';\n\nconst getData = async (city) => {\n    const key = 'd30221db037a220fa065462876bb7f59';\n    try {\n        const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${key}&units=metric`);\n        return data;\n    } catch (error) {\n     return error;\n    }\n};\nexport default getData;\n","import React, {useState} from 'react';\r\n\r\nimport Search from './components/Search/Search';\r\nimport {Container} from \"reactstrap\";\r\nimport './App.css';\r\nimport ShowTheWeather from './components/ShowTheWeather';\r\nimport Error from './components/Errora';\r\nimport getServerData from \"./Service\";\r\n\r\nconst App = () => {\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [weather, setWeather] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n\r\n    const getWeather = async (city) => {\r\n        setError(false);\r\n        setLoading(!loading);\r\n        setDisabled(!disabled);\r\n\r\n        const response = await getServerData(city);\r\n        if (!response.main) {\r\n            setError(!error)\r\n            setLoading(prevState => !prevState);\r\n            setDisabled(prevState => !prevState);\r\n        } else {\r\n            const {main, sys, weather, name, wind} = response;\r\n            setWeather({main, sys, name, weather, wind})\r\n            setIsActive(prevState => !prevState);\r\n        }\r\n    }\r\n    const deactive = () => {\r\n        setLoading(prevState => !prevState);\r\n        setDisabled(prevState => !prevState);\r\n        setIsActive(prevState => !prevState);\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <Container>\r\n                <h2>Weather App</h2>\r\n                <div>\r\n                    <Search getWeather={ getWeather } disabled={ disabled } loading={ loading }/>\r\n                </div>\r\n                <div>\r\n                    { weather &&\r\n                    <ShowTheWeather theWeather={ weather } deactive={ deactive } isActive={ isActive }/>\r\n                    }\r\n                    {\r\n                        error && <Error/>\r\n                    }\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}