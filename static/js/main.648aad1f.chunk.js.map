{"version":3,"sources":["components/Search/Search.jsx","components/Image/Image.jsx","components/ShowTheWeather.jsx","components/Errora.jsx","Service/Service.js","App.js","serviceWorker.js","index.js"],"names":["Search","getWeather","onSubmit","Input","type","name","placeholder","className","aria-label","aria-describedby","Image","main","src","ShowTheWeather","deactive","city","isActive","Modal","isOpen","ModalHeader","toggle","ModalBody","sys","country","weather","temp","feels_like","humidity","wind","speed","ModalFooter","Button","color","size","onClick","Errora","props","role","getData","a","axios","get","data","App","state","error","e","preventDefault","newCity","target","elements","value","getServerData","rezult","setState","this","Container","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.648aad1f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Input, Container } from 'reactstrap';\r\nimport './style.css'\r\n\r\nconst Search = ({getWeather}) => {\r\n    return (\r\n        <form onSubmit={getWeather}>\r\n            <Input type=\"text\" name=\"city\" placeholder=\"Enter your city...\" className=\"form-control\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\"/>\r\n            <button  className=' asd btn-success btn-lg'>Search</button>\r\n        </form>\r\n    )\r\n}\r\nexport default Search;\r\n","import React from 'react';\r\nimport './image.css';\r\n\r\nconst Image = ({main}) => {\r\n\r\n    if (main === \"Clouds\") {\r\n        return (<div>\r\n            <img src=\"https://w0.pngwave.com/png/72/265/cloud-icon-sun-clouds-weather-icon-png-clip-art.png\"/>\r\n        </div>)\r\n    } else if (main === \"Clear\") {\r\n        return (<div>\r\n            <img src=\"https://icon-library.com/images/sunny-weather-icon/sunny-weather-icon-14.jpg\"/>\r\n        </div>)\r\n    } else if (main === \"Rain\") {\r\n        return (<div><img\r\n            src=\"https://www.netclipart.com/pp/m/12-120684_showers-weather-clipart-astonishing-showers-weather-rainy-clipart.png\"/>\r\n        </div>)\r\n    } else if (main === \"Snow\") {\r\n        return (<div><img\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Weather-snow.svg/1024px-Weather-snow.svg.png\"/>\r\n        </div>)\r\n    } else if (main === \"Mist\") {\r\n        return (<div><img src=\"https://www.iconfinder.com/data/icons/weather-350/64/fog-weather-mist-512.png\"/>\r\n        </div>)\r\n    } else if (main === \"Thunderstorm\") {\r\n        return (<div><img\r\n            src=\"https://www.clipartkey.com/mpngs/m/9-92258_clip-art-lightning-storm-clipart-thunderstorm-clipart.png\"/>\r\n        </div>)\r\n    }\r\n    return '';\r\n}\r\n\r\nexport default Image;\r\n","import React from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from \"reactstrap\";\r\nimport Image from './Image/Image';\r\n\r\n\r\nconst ShowTheWeather = ({deactive, city, isActive}) => {\r\n    return (\r\n        <Modal isOpen={isActive}>\r\n            <ModalHeader toggle={deactive}>Погода у місті {city.name}</ModalHeader>\r\n            <ModalBody>\r\n                <p>Місто: {city.name} {city.sys.country}</p>\r\n                <p>Погода : <Image main={city.weather[0].main}/>{city.weather[0].main}</p>\r\n                <p>Температура: {city.main.temp}°C</p>\r\n                <p>Відчуваєтся як : {city.main.feels_like} °C</p>\r\n                <p>Вологість : {city.main.humidity} %</p>\r\n                <p>Швидкість вітру : {city.wind.speed} m/c</p>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"success\" size=\"sm\" onClick={deactive}>OK =)</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}\r\nexport default ShowTheWeather;\r\n","import React from 'react';\r\n\r\n\r\nconst Errora = (props) => {\r\n    return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n            <strong>False request :(</strong> Try again!\r\n        </div>\r\n    )\r\n}\r\nexport default Errora;\r\n","import axios from 'axios';\r\n\r\nconst getData = async (city) => {\r\n    const key = 'd30221db037a220fa065462876bb7f59'\r\n    try {\r\n        const {data} = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${key}&units=metric`)\r\n        return data;\r\n    } catch (e) {\r\n        return;\r\n    }\r\n}\r\nexport default getData;\r\n","import React from 'react';\r\n\r\nimport Search from './components/Search/Search';\r\nimport {Container} from \"reactstrap\";\r\nimport './App.css';\r\nimport ShowTheWeather from './components/ShowTheWeather';\r\nimport Errora from './components/Errora';\r\nimport getServerData from \"./Service/Service\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        city: '',\r\n        isActive: false,\r\n        error: false,\r\n    }\r\n    getWeather = async (e) => {\r\n        e.preventDefault();\r\n        const newCity = e.target.elements.city.value;\r\n        const rezult = await getServerData(newCity);\r\n        rezult ?\r\n            this.setState({\r\n                city: rezult,\r\n                isActive: !this.state.isActive,\r\n                error:false\r\n            })\r\n            :\r\n            this.setState({\r\n                error: true\r\n            })\r\n    }\r\n    deactive = () => {\r\n        this.setState({isActive: false})\r\n    }\r\n\r\n    render() {\r\n        const {city, error, isActive} = this.state;\r\n        return (\r\n            <div className='main'>\r\n                <Container>\r\n                    <div>\r\n                        <Search getWeather={this.getWeather}/>\r\n                    </div>\r\n                    {city &&\r\n                    <ShowTheWeather city={city} deactive={this.deactive} isActive={isActive}/>\r\n                    }\r\n                    {\r\n                        error && <Errora/>\r\n                    }\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}